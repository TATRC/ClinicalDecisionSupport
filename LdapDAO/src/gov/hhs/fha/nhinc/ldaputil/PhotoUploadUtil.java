/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PhotoUploadUtil.java
 *
 * Created on Jan 27, 2011, 12:11:50 PM
 */

package gov.hhs.fha.nhinc.ldaputil;

import gov.hhs.fha.nhinc.ldapaccess.ContactDAO;
import gov.hhs.fha.nhinc.ldapaccess.ContactDTO;
import gov.hhs.fha.nhinc.ldapaccess.LdapService;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author cmatser
 */
public class PhotoUploadUtil extends javax.swing.JFrame {

    /**
     *  Contacts
     */
    private List<ContactDTO> contacts;
    private List<Boolean> dirtyFlags;

    /**
     *  Selected Contact
     */
    private ContactDTO selectedContact = null;

    /** Creates new form PhotoUploadUtil */
    public PhotoUploadUtil() {
        initComponents();
        commitButton.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        contactList = new javax.swing.JList();
        refreshButton = new javax.swing.JButton();
        photoLabel = new javax.swing.JLabel();
        modifyButton = new javax.swing.JButton();
        commitButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Photo Upload Utility");
        setLocationByPlatform(true);

        contactList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        contactList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        contactList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                contactListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(contactList);

        refreshButton.setText("Refresh Contacts");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        photoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        photoLabel.setText("Current Photo:");
        photoLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        photoLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        photoLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        modifyButton.setText("Modify Photo...");
        modifyButton.setEnabled(false);
        modifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyButtonActionPerformed(evt);
            }
        });

        commitButton.setText("Commit");
        commitButton.setEnabled(false);
        commitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commitButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        statusLabel.setText("Started.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(modifyButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                                .addComponent(commitButton))
                            .addComponent(photoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE))
                        .addContainerGap())
                    .addComponent(refreshButton)))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(photoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(modifyButton)
                            .addComponent(commitButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(refreshButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        ContactDAO contactDAO = LdapService.getContactDAO();
        contacts = contactDAO.findAllContacts();
        dirtyFlags = new LinkedList<Boolean>();
        Vector<String> listData = new Vector<String>();
        Iterator<ContactDTO> iterator = contacts.iterator();
        while (iterator.hasNext()) {
            ContactDTO contact = iterator.next();
            listData.add(contact.getDisplayName());
            dirtyFlags.add(Boolean.FALSE);
        }
        contactList.setListData(listData);
        contactList.setSelectedIndex(0);

        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                updateDisplayComponent();
            }
        });
}//GEN-LAST:event_refreshButtonActionPerformed

    private void modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "JPG & GIF Images", "jpg", "gif");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            byte[] bites = null;
            try {
                File file = chooser.getSelectedFile();
                BufferedInputStream fis = new BufferedInputStream(
                    new FileInputStream(file));
                bites = new byte[(int) file.length()];
                for (int bite = fis.read(),i=0; bite != -1; bite = fis.read(), i++) {
                    bites[i] = (byte) bite;
                }
                fis.close();
            }
            catch (Exception e) {
                statusLabel.setText("Error reading file: " + chooser.getSelectedFile().getName());
                e.printStackTrace();
                bites = null;
            }

            if (bites != null) {
                statusLabel.setText("Setting photo: " + bites.length + " bytes.");
                selectedContact.setJpegPhoto(bites);
                dirtyFlags.set(contactList.getSelectedIndex(), Boolean.TRUE);

                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        updateDisplayComponent();
                    }
                });
            }
        }

}//GEN-LAST:event_modifyButtonActionPerformed

    private void contactListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_contactListValueChanged
        int index = contactList.getSelectedIndex();

        if ((index >= 0) && (index < contacts.size())) {

            selectedContact = contacts.get(index);

            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    updateDisplayComponent();
                }
            });

            modifyButton.setEnabled(true);
        }
        else {
            modifyButton.setEnabled(false);

            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    clearDisplayComponent();
                }
            });

        }
    }//GEN-LAST:event_contactListValueChanged

    private void commitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commitButtonActionPerformed
        ContactDAO contactDAO = LdapService.getContactDAO();
        contactDAO.updatePhoto(selectedContact);
        dirtyFlags.set(contactList.getSelectedIndex(), Boolean.FALSE);

        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                updateDisplayComponent();
            }
        });
    }//GEN-LAST:event_commitButtonActionPerformed

    /**
     * Updates the component displaying the image of the selected contact.
     */
    private void updateDisplayComponent() {
        byte[] image = selectedContact.getJpegPhoto();
        String baseText = "Current Photo";
        StringBuilder status = new StringBuilder();

        if (image != null) {
            photoLabel.setText(baseText + "(" + selectedContact.getDisplayName() + "):");
            photoLabel.setIcon(new ImageIcon(image));
        }
        else {
            photoLabel.setText(baseText + "(empty):");
            photoLabel.setIcon(null);

            status.append("No image. ");
        }

        if (dirtyFlags.get(contactList.getSelectedIndex())) {
            commitButton.setEnabled(true);
            commitButton.setVisible(true);
            status.append("Dirty record. ");
        }
        else {
            commitButton.setEnabled(false);
            commitButton.setVisible(false);
        }

        statusLabel.setText(status.toString());
    }

    /**
     * Clears the component displaying the image of the selected contact.
     */
    private void clearDisplayComponent() {
        photoLabel.setIcon(null);
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PhotoUploadUtil().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton commitButton;
    private javax.swing.JList contactList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modifyButton;
    private javax.swing.JLabel photoLabel;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables

}
